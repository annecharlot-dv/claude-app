{"version":3,"file":"static/js/550.e90df1fb.chunk.js","mappings":"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","sources":["pages/FormBuilder.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Save, ArrowLeft, Plus, Trash2, Settings } from 'lucide-react';\nimport api from '../services/api';\n\nconst FormBuilder = () => {\n  const navigate = useNavigate();\n  const { formId } = useParams();\n  const queryClient = useQueryClient();\n  const isEditing = !!formId;\n\n  const [form, setForm] = useState({\n    name: '',\n    title: '',\n    description: '',\n    fields: [],\n    success_message: 'Thank you for your submission!',\n    email_notifications: []\n  });\n\n  const saveForm = useMutation({\n    mutationFn: (data) => {\n      if (isEditing) {\n        return api.put(`/forms/${formId}`, data);\n      } else {\n        return api.post('/forms', data);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['forms']);\n      navigate('/forms');\n    },\n  });\n\n  const addField = (type) => {\n    const newField = {\n      id: Date.now().toString(),\n      label: `New ${type} field`,\n      type,\n      is_required: false,\n      options: type === 'select' || type === 'radio' || type === 'checkbox' ? ['Option 1', 'Option 2'] : [],\n      placeholder: '',\n      validation_rules: {}\n    };\n\n    setForm(prev => ({\n      ...prev,\n      fields: [...prev.fields, newField]\n    }));\n  };\n\n  const updateField = (fieldId, updates) => {\n    setForm(prev => ({\n      ...prev,\n      fields: prev.fields.map(field =>\n        field.id === fieldId ? { ...field, ...updates } : field\n      )\n    }));\n  };\n\n  const deleteField = (fieldId) => {\n    setForm(prev => ({\n      ...prev,\n      fields: prev.fields.filter(field => field.id !== fieldId)\n    }));\n  };\n\n  const handleSave = () => {\n    saveForm.mutate(form);\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => navigate('/forms')}\n            className=\"p-2 text-gray-500 hover:text-gray-700\"\n          >\n            <ArrowLeft className=\"h-5 w-5\" />\n          </button>\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              {isEditing ? 'Edit Form' : 'Create New Form'}\n            </h1>\n            <p className=\"text-sm text-gray-600\">\n              Build custom forms to capture leads\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          <button\n            onClick={handleSave}\n            disabled={saveForm.isLoading}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50\"\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saveForm.isLoading ? 'Saving...' : 'Save Form'}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Form Settings */}\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Form Settings</h3>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Form Name (Internal)\n              </label>\n              <input\n                type=\"text\"\n                value={form.name}\n                onChange={(e) => setForm(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Contact Form\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Form Title (Public)\n              </label>\n              <input\n                type=\"text\"\n                value={form.title}\n                onChange={(e) => setForm(prev => ({ ...prev, title: e.target.value }))}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Contact Us\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Description\n              </label>\n              <textarea\n                value={form.description}\n                onChange={(e) => setForm(prev => ({ ...prev, description: e.target.value }))}\n                rows={3}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Form description...\"\n              />\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Success Message\n              </label>\n              <textarea\n                value={form.success_message}\n                onChange={(e) => setForm(prev => ({ ...prev, success_message: e.target.value }))}\n                rows={2}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n              />\n            </div>\n          </div>\n\n          {/* Field Types */}\n          <div className=\"mt-6\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-3\">Add Field</h4>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {[\n                { type: 'text', label: 'Text' },\n                { type: 'email', label: 'Email' },\n                { type: 'phone', label: 'Phone' },\n                { type: 'textarea', label: 'Text Area' },\n                { type: 'select', label: 'Dropdown' },\n                { type: 'checkbox', label: 'Checkbox' },\n              ].map(({ type, label }) => (\n                <button\n                  key={type}\n                  onClick={() => addField(type)}\n                  className=\"p-2 text-left border border-gray-200 rounded-lg hover:bg-gray-50 text-sm\"\n                >\n                  {label}\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Form Builder */}\n        <div className=\"lg:col-span-2 bg-white shadow rounded-lg\">\n          <div className=\"p-6\">\n            <h3 className=\"text-lg font-medium text-gray-900 mb-6\">Form Fields</h3>\n            \n            {form.fields.length > 0 ? (\n              <div className=\"space-y-4\">\n                {form.fields.map((field, index) => (\n                  <FormField\n                    key={field.id}\n                    field={field}\n                    index={index}\n                    onUpdate={(updates) => updateField(field.id, updates)}\n                    onDelete={() => deleteField(field.id)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Plus className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No fields yet</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Add fields to your form using the controls on the left.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst FormField = ({ field, index, onUpdate, onDelete }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <div className=\"border border-gray-200 rounded-lg p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm font-medium text-gray-500\">#{index + 1}</span>\n          <input\n            type=\"text\"\n            value={field.label}\n            onChange={(e) => onUpdate({ label: e.target.value })}\n            className=\"font-medium text-gray-900 border-none p-0 focus:ring-0 focus:outline-none bg-transparent\"\n            placeholder=\"Field label\"\n          />\n          <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n            {field.type}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"p-1 text-gray-400 hover:text-gray-600\"\n          >\n            <Settings className=\"h-4 w-4\" />\n          </button>\n          <button\n            onClick={onDelete}\n            className=\"p-1 text-red-400 hover:text-red-600\"\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Field Preview */}\n      <div className=\"mb-3\">\n        {field.type === 'textarea' ? (\n          <textarea\n            placeholder={field.placeholder || field.label}\n            className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50\"\n            rows={3}\n            disabled\n          />\n        ) : field.type === 'select' ? (\n          <select className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50\" disabled>\n            <option>Choose an option...</option>\n            {field.options.map((option, i) => (\n              <option key={i}>{option}</option>\n            ))}\n          </select>\n        ) : (\n          <input\n            type={field.type}\n            placeholder={field.placeholder || field.label}\n            className=\"w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50\"\n            disabled\n          />\n        )}\n      </div>\n\n      {/* Field Settings */}\n      {isExpanded && (\n        <div className=\"space-y-3 pt-3 border-t border-gray-200\">\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id={`required-${field.id}`}\n              checked={field.is_required}\n              onChange={(e) => onUpdate({ is_required: e.target.checked })}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <label htmlFor={`required-${field.id}`} className=\"ml-2 block text-sm text-gray-900\">\n              Required field\n            </label>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Placeholder text\n            </label>\n            <input\n              type=\"text\"\n              value={field.placeholder}\n              onChange={(e) => onUpdate({ placeholder: e.target.value })}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n              placeholder=\"Enter placeholder...\"\n            />\n          </div>\n\n          {(field.type === 'select' || field.type === 'radio' || field.type === 'checkbox') && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Options (one per line)\n              </label>\n              <textarea\n                value={field.options.join('\\n')}\n                onChange={(e) => onUpdate({ options: e.target.value.split('\\n').filter(o => o.trim()) })}\n                rows={3}\n                className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-blue-500 focus:border-blue-500\"\n                placeholder=\"Option 1&#10;Option 2&#10;Option 3\"\n              />\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FormBuilder;"],"names":["FormField","_ref2","field","index","onUpdate","onDelete","isExpanded","setIsExpanded","useState","_jsxs","className","children","_jsx","type","value","label","onChange","e","target","placeholder","onClick","Settings","Trash2","rows","disabled","options","map","option","i","id","concat","checked","is_required","htmlFor","join","split","filter","o","trim","FormBuilder","navigate","useNavigate","formId","useParams","queryClient","useQueryClient","isEditing","form","setForm","name","title","description","fields","success_message","email_notifications","saveForm","useMutation","mutationFn","data","api","put","post","onSuccess","invalidateQueries","ArrowLeft","handleSave","mutate","isLoading","Save","prev","_objectSpread","_ref","newField","Date","now","toString","validation_rules","addField","length","updates","updateField","fieldId","deleteField","Plus"],"sourceRoot":""}