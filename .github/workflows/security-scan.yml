name: Security & Compliance Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json
      
      - name: Run Snyk for Python dependencies
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/requirements.txt

  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  compliance-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: GDPR Compliance Check
        run: |
          echo "Checking GDPR compliance..."
          # Check for data processing consent mechanisms
          grep -r "consent" frontend/src/ || echo "Warning: No consent mechanisms found"
          grep -r "privacy" frontend/src/ || echo "Warning: No privacy policy references found"
          
          # Check for data retention policies
          grep -r "retention" backend/ || echo "Warning: No data retention policies found"
          
          # Check for data deletion capabilities
          grep -r "delete.*user" backend/ || echo "Warning: No user deletion capabilities found"
      
      - name: SOC 2 Compliance Check
        run: |
          echo "Checking SOC 2 compliance..."
          # Check for audit logging
          grep -r "audit" backend/ || echo "Warning: No audit logging found"
          
          # Check for access controls
          grep -r "authorization" backend/ || echo "Warning: No authorization controls found"
          
          # Check for encryption
          grep -r "encrypt" backend/ || echo "Warning: No encryption implementation found"
      
      - name: Multi-tenant Security Check
        run: |
          echo "Checking multi-tenant security..."
          # Check for tenant isolation
          grep -r "tenant_id" backend/ || echo "Error: No tenant isolation found"
          
          # Check for subdomain validation
          grep -r "subdomain" backend/ || echo "Warning: No subdomain validation found"
          
          # Check for cross-tenant data access prevention
          grep -r "filter.*tenant" backend/ || echo "Warning: No tenant filtering found"

  infrastructure-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Checkov for IaC security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
      
      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: checkov-results.sarif

  security-headers-check:
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check Security Headers
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Check security headers
          curl -I https://your-domain.com | grep -i "strict-transport-security" || echo "Missing HSTS header"
          curl -I https://your-domain.com | grep -i "x-frame-options" || echo "Missing X-Frame-Options header"
          curl -I https://your-domain.com | grep -i "x-content-type-options" || echo "Missing X-Content-Type-Options header"
          curl -I https://your-domain.com | grep -i "content-security-policy" || echo "Missing CSP header"